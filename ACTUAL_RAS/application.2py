from flask.ext.socketio import SocketIO, emit
import os
from flask import Flask, render_template , request , send_from_directory, jsonify

from random import random
from time import sleep
from threading import Thread, Event

import json
import serial
import datetime

__author__ = 'Bartqu'

app = Flask(__name__)

app.config['SECRET_KEY'] = 'secret!'
app.config['DEBUG'] = True

#turn the flask app into a socketio app
socketio = SocketIO(app)

#random number Generator Thread
thread = Thread()
thread_stop_event = Event()


class RandomThread(Thread):
    def __init__(self):
        self.delay = 1

        super(RandomThread, self).__init__()

    def randomNumberGenerator(self):
        print "Making random numbers"
	ser = serial.Serial(
		    port='/dev/serial0',
		    baudrate = 115200,
		    parity=serial.PARITY_NONE,
		    stopbits=serial.STOPBITS_ONE,
		    bytesize=serial.EIGHTBITS
		    #timesout=1

		)
        while not thread_stop_event.isSet():
            	stan=0
		ilast=0
		ik=0
		data_str=""
		last_data={}
		lastfulldataindex=0
		while True:
			if (ser.inWaiting()>0 ):
				 data_str=data_str+ser.read(ser.inWaiting())
				 for i,c in enumerate(data_str):
					if c == "#" and stan==0:
						lastfulldataindex=i
						stan=1
						ilast=i
					if c =="-" and stan==1:
						lastfulldataindex=i
						times=int(data_str[ilast+1:i] )
						times=str(datetime.timedelta(seconds=times))
						last_data[times]=dict()
						ilast=i
						stan=2
					if c==":" and stan==2:
						lastfulldataindex=i
						name=data_str[ilast+1:i]
						stan=3
						ilast=i
					if c==">" and stan==3:
						lastfulldataindex=i
						data=data_str[ilast+1:i]
						last_data[times][name]=data
						stan=2
						ilast=i
					if c=="$" and stan==3:
						lastfulldataindex=i
						data=data_str[ilast+1:i]
						last_data[times][name]=data
						stan=0
						ilast=i
						print last_data
						socketio.emit('newnumber', {'number': json.dumps(last_data)}, namespace='/test')
						last_data={}
				 data_str=data_str[lastfulldataindex:]
				 lastfulldatandex=0
				 ilast=0
				 sleep(0.0001)
			else :
			 	 sleep(0.001)

    def run(self):
        self.randomNumberGenerator()

@socketio.on('set',namespace='/test')
def seter(msg):
     print msg['a']




@app.route('/')
def index():
    return render_template('main.html')

@app.route('/VizScada')
def VizScada():
    return render_template('ProgViz.html')
@app.route('/ProgStm')
def ProgStm():
    return render_template('ProgStm.html')


@app.route('/sterownik', methods=['GET', 'POST'])
def get_sterdata():
     a={}
     a['path_project']=dict()

     for dirName, subdirList, fileList in os.walk(request.form['path_project']):
        a['path_project'][(dirName.rsplit('/',1))[-1]]=[]
        for fname in fileList:
          try:
            a['path_project'][(dirName.rsplit('/',1))[-1]].append(fname)
          except KeyError:
            print 'errror'

     return jsonify({'project_list': a })

@app.route('/projects', methods=['GET', 'POST'])							#Odsylanie gotowych projektow
def get_project():
    name=request.args.get('name')
    project=request.args.get('project')
    print name
    print project
    url=os.path.dirname(os.path.realpath(__file__))+ '/templates/Projects/' + project
    print url
    return send_from_directory(url ,name)



@app.route('/uploads', methods=['GET', 'POST'])								#zapisywanie wizualizacji
def save_upload():
	if request.method=='POST' :
		filepath = os.path.join("/home/pi/Desktop/GIT/ADAM/ACTUAL_RAS/templates/Projects",request.form['name'])
		f=open(filepath ,"w+" )
		f.write( request.form['data'])
		f.close()
		print os.listdir("/home/pi/Desktop/GIT/ADAM/ACTUAL_RAS/templates/Projects")
		return ""
	return ""






@socketio.on('connect', namespace='/test')
def test_connect():
    # need visibility of the global thread object
    global thread
    print('Client connected')
    if not thread.isAlive():
        print "Starting Thread"
        thread = RandomThread()
        thread.start()

@socketio.on('disconnect', namespace='/test')
def test_disconnect():
    print('Client disconnected')


if __name__ == '__main__':

    socketio.run(app, host='0.0.0.0')
